---
import Layout from '../layouts/Layout.astro'
---

<title>Classes</title>
<link rel="icon" id="favicon" type="image/svg+xml" href="/img/classroom.png" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<style is:global>
    * {
        font-family: sfprosemibold;
    }
    body {
        background: linear-gradient(135deg, #1e1e2e, #534158);
        overflow: hidden;
        margin: 0;
    }

    .inputWrapper {
        display: flex;
        all: unset;
        align-items: center;
        justify-content: center;
        position: relative;
        width: 100%;
    }

    .inputWrapper svg {       
        height: 20px;
        transform: translateY(-50%);
        top: 51%;
        z-index: 100;
        position: absolute;
        width: 20px;
        left: 10px;
    }

    .input:hover {
        animation: none;
    }

    .input {
        width: 100%;
        height: 25px;
        background-color: var(--Secondary-Color);
        color: white;
        animation: none;
        border: none;
        border-radius: 30px;
        padding: 0px 0px 0px 40px;
        margin-top: 5px !important;
        font-family: 'Be Vietnam Pro', sans-serif;
        display: inline;
    }

    @keyframes goOut {
        0% {
            width: 200px;
            opacity: 0.5;
            transform: translateY(20px);
        }
        100% {
            width: 50%;
            opacity: 1;
            transform: translateY(0);
        }
    }

    .topbar button {
        animation: riseUp 1s;
    }

    @keyframes riseUp {
        0% {
            opacity: 0;
            transform: translateY(20px);
        }
        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }
    /* big meowmeowm okemoqwpomemwmeowmoqfnfdngjdfsng */
</style>

<Layout title="Google Classroom">
    <button class="barbutton" id="barButton" onclick="
        openTopbar()"
        ><span class="material-symbols-outlined">arrow_downward</span></button
    >
</button>
    <div class="topbar" id="topbar" style="color: white;">
        <div class="topbar-content">
        <button
        class="topbtn"
        id="bckbttn"
        onclick="back()"
        style="left: 30px;"
    >
    <span class="material-symbols-outlined">
        arrow_back_ios
        </span>
    </button>
            <button
                class="topbtn"
                id="rfshbttn"
                onclick="refresh()"
                style="left: 30px;"
            >
                <span class="material-symbols-outlined" style="color: white;">
                    refresh
                </span>
            </button>
            <button
            class="topbtn"
            id="bckbttn"
            onclick="home()"
            style="left: 30px;"
        >
            <span class="material-symbols-outlined" style="color: white;">
                home
            </span>
        </button>
        <div class="inputWrapper">
            <svg xmlns="http://www.w3.org/2000/svg" height="20px" viewBox="0 -960 960 960" width="20px" fill="#FFFFFF"><path d="M240-80q-33 0-56.5-23.5T160-160v-400q0-33 23.5-56.5T240-640h40v-80q0-83 58.5-141.5T480-920q83 0 141.5 58.5T680-720v80h40q33 0 56.5 23.5T800-560v400q0 33-23.5 56.5T720-80H240Zm0-80h480v-400H240v400Zm240-120q33 0 56.5-23.5T560-360q0-33-23.5-56.5T480-440q-33 0-56.5 23.5T400-360q0 33 23.5 56.5T480-280ZM360-640h240v-80q0-50-35-85t-85-35q-50 0-85 35t-35 85v80ZM240-160v-400 400Z"/></svg>
            <input
                type="text"
                class="input"
                id="forminput"
                placeholder="Search or enter a web address"
            />
        </div>
            <button class="topbtn" id="topbttn" onclick="closeTopbar()">
                <span class="material-symbols-outlined" style="color: white;">
                    arrow_upward
                </span>
            </button>
            <button class="topbtn" id="panelbttn" onclick="openswitchpanel()">
                <span class="material-symbols-outlined" style="color: white;">
                    page_info
                </span>
            </button>
        </div>
    </div>
    <div class="hiddenuvpanel" id="uvpanel">
        <button
            class="copybttn"
            id="copybttn"
            onclick="copyurl()"
            style="font-family: 'Be Vietnam Pro', sans-serif;">Copy URL</button
        >
        <button
            class="copybttn"
            id="copybttn"
            onclick="inspect()"
            style="font-family: 'Be Vietnam Pro', sans-serif;">Inspect</button
        >
        <button
            class="topbtn"
            id="opbttn"
            onclick="op()"
            style="left: 30px; margin-top: 10px;"
        >
            <span class="material-symbols-outlined"> open_in_new</span>
        </button>
    </div>
    <iframe class="mainiframe" id="frame"></iframe>
</Layout>
<script is:inline>
    const frame = document.getElementById('frame')
    const form = document.getElementById('forminput')
    const topbar = document.getElementById('topbar')
    localStorage.setItem('nav', '0')
    const panelbttn = document.getElementById('panelbttn')
    const uvpanel = document.getElementById('uvpanel')
    const url = localStorage.getItem('url')
    const barbutton = document.getElementById('barButton')
    const iframe = document.getElementById('frame')

    document.addEventListener('DOMContentLoaded', async (event) => {
       LoadURL()
    })

    function closeTopbar() {
        iframe.classList.remove('mainframe')
        iframe.classList.add('iframe')
        topbar.classList.remove('topbar')
        topbar.classList.add('hiddenbar')
        barbutton.classList.remove('barbutton')
        barbutton.classList.add('showbutton')
    }

    function home() {
        window.location.href = '/'
    }

    function openTopbar() {
        barbutton.classList.remove('showbutton')
        barbutton.classList.add('barbutton')
        iframe.classList.remove('iframe')
        iframe.classList.add('mainframe')
        topbar.classList.remove('hiddenbar')
        topbar.classList.add('topbar')
    }

    function copyurl() {
        const copybttn = document.getElementById('copybttn')
        navigator.clipboard.writeText(frame.src)
        copybttn.textContent = 'Copied!'
        setTimeout("copybttn.textContent = 'Copy URL'", 3000)
    }

    function refresh() {
        iframe.src = frame.src
    }

    function back() {
        iframe.contentWindow.history.back()
    }

    //jank!!!

    const pp = localStorage.getItem("pr")
        async function encodeUrl(url) {
        switch(pp) {
            case "uv":
               return __uv$config.prefix + __uv$config.encodeUrl(url)
            case null:
            __uv$config.prefix + __uv$config.encodeUrl(url)
        }
    }

    async function setURL() {
        frame.contentWindow.window.open = async function (
            url,
            windowName,
            windowFeatures
        ) {
            iframe.src = __uv$config.prefix + __uv$config.encodeUrl(url)
        }
        if (document.activeElement === document.getElementById('forminput')) {
        } else {
            const geturl = frame.contentWindow.location.href
            const removedUrl = geturl.replace(
                'https://' + location.hostname + '/u/liftoff/',
                ''
            )
            form.value = __uv$config.decodeUrl(removedUrl)
            }
        }

    setInterval(function () {
        setURL()
    }, 1000)

    function LoadURL() {
            console.log(url)
            frame.src = url
    }

    function openswitchpanel() {
        uvpanel.classList.remove('hiddenuvpanel')
        uvpanel.classList.add('uvpanel')
        panelbttn.setAttribute('onclick', 'closeswitchpanel()')
    }

    function closeswitchpanel() {
        uvpanel.classList.remove('uvpanel')
        uvpanel.classList.add('hiddenuvpanel')
        panelbttn.setAttribute('onclick', 'openswitchpanel()')
    }

    function op() {
        var win = window.open()
        var url = '/q/'
        var iframe = win.document.createElement('iframe')
        iframe.style.position = 'fixed'
        iframe.style.top = 0
        iframe.style.bottom = 0
        iframe.style.left = 0
        iframe.style.right = 0
        iframe.style.border = 'none'
        iframe.style.outline = 'none'
        iframe.style.width = '100%'
        iframe.style.height = '100%'
        iframe.src = url

        win.document.body.appendChild(iframe)
    }

    function inspect() {
        document.getElementById('frame').contentWindow.eruda.init()
    }

    document.addEventListener('DOMContentLoaded', () => {
        const input = document.querySelector('.input')
        input.addEventListener('keydown', handleInput)

       async function handleInput(e) {
            if (e.key !== 'Enter') return
            if (containsBlockedKeyword(input.value, blocked)) {
                window.location.replace('/blocked.html')
            } else {
                const query = formatSearch(input.value)
                document.getElementById('frame').src = __uv$config.prefix + __uv$config.encodeUrl(query);
            }
        }

        function containsBlockedKeyword(input, blockedList) {
            for (let i = 0; i < blockedList.length; i++) {
                if (input.includes(blockedList[i])) {
                    return true
                }
            }
            return false
        }

        function formatSearch(query) {
            const engine = localStorage.getItem('engine')
            if (engine === null) {
                localStorage.setItem(
                    'engine',
                    'https://www.google.com/search?q='
                )
            }

            try {
                return new URL(query).toString()
            } catch (e) {}

            try {
                const url = new URL(`https://${query}`)
                if (url.hostname.includes('.')) return url.toString()
            } catch (e) {}

            return new URL(engine + `${query}`).toString()
        }

        const blocked = [
            'porn',
            'sex',
            'xxx',
            'hentai',
            'pornhub.com',
            'xxx.com',
            '4chan.org',
        ]
    })

    /* switch(p) {
        case "uv":
            console.log("Wikipedia Loaded!")
            break;
        case "scram!!": 
        const connection = new BareMux.BareMuxConnection("/baremux/worker.js");
        let wispurl = (location.protocol === "https:" ? "wss" : "ws") + "://" + location.host + "/wisp/";
        connection.setTransport("/epoxy/index.mjs", [{ wisp: wispurl }]);
        console.log("Desmos Loaded!")
        break;
    } */
</script>
